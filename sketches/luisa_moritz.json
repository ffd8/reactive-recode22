{
  "version": "1.4.1",
  "revision": 44,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "luisa_moritz",
      "mod": 1673012920411,
      "code": "let credits = {\n\t\"student_names\": \"Luisa Viggiano, Moritz Bösiger\",\n\t\"recode_id\": \"zotero2-2604593.DHHJU7ZW\",\n\t\"recode_timestamp\": 19,\n\t\"recode_title\": \"Rechteckrahmen_Grössenfahrt\",\n\t\"recode_designer\": \"Peter von Arx\",\n\t\"recode_year\": 0\n}\n\nlet sliderRot, rot = 0; // global variables \nlet sliderGrey, grey = 255\nlet sliderWeight, weight = 40\nlet sliderMotion, motion = 100\nlet sliderSpeed, speed = 0.3\nlet sliderrect1, rect1 = 0\nlet sliderrect2, rect2 = 0\nlet sliderrect3, rect3 = 0\nlet sliderrect4, rect4 = 0\n\nlet guiHolder\n\nlet sliderround, r = 0\nlet checkboxAudio\nlet checkboxTunnel\nlet myButton;\nlet myButton2;\nlet myButton3;\nlet bgColor = 0\nlet bgColor2 = 0\nlet bgColor3 = 0\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t/*\tcreateCanvas(windowWidth, windowHeight);\n\t\tsliderRot = createSlider(0.0, 1.0, 0, .01); // min, max, default, stepSize \n\t\tsliderRot.position(width / 2, 80); // set position\n\t\tsliderRot.position(width * 0.85, 80); // set position \n\n\t\tsliderGrey = createSlider(0, 255, 255, .01)\n\t\tsliderGrey.position(width * 0.85, 120)\n\n\t\tsliderWeight = createSlider(0, 80, 40, .01)\n\t\tsliderWeight.position(width * 0.85, 160)\n\n\t\tsliderMotion = createSlider(1, 200, 100, .01)\n\t\tsliderMotion.position(width * 0.85, 200)\n\n\t\tsliderSpeed = createSlider(0, 1, 0.3, .01)\n\t\tsliderSpeed.position(width * 0.85, 240)\n\n\t\tsliderrect1 = createSlider(0, 1.2, 0.6, .01)\n\t\tsliderrect1.position(width * 0.85, 280)\n\n\t\tsliderrect2 = createSlider(0, 0.8, 0.4, .01)\n\t\tsliderrect2.position(width * 0.85, 320)\n\n\t\tsliderrect3 = createSlider(0, 4, 2, .01)\n\t\tsliderrect3.position(width * 0.85, 360)\n\n\t\tsliderrect4 = createSlider(0, 2.4, 1.2, .01)\n\t\tsliderrect4.position(width * 0.85, 400)\n\n\t\tsliderround = createSlider(0, 1000, 0, .01)\n\t\tsliderround.position(width * 0.85, 440)\n\n\t\tmyButton = createButton('random background'); // give label \n\t\tmyButton.position(width * 0.85, 480); // set position \n\t\tmyButton.mousePressed(changeBG); // run function when pressed \n\n\t\tmyButton2 = createButton('reset background'); // give label \n\t\tmyButton2.position(width * 0.85, 520); // set position \n\t\tmyButton2.mousePressed(changeBG2); // run function when pressed \n\n\t\tmyButton3 = createButton('reset rotation'); // give label \n\t\tmyButton3.position(width * 0.85, 560); // set position \n\t\tmyButton3.mousePressed(changerotation); // run function when pressed \n\t\t*/\n\n\n\tsetupGUI()\n\n\tsetupAudio();\n\n\trectMode(CENTER)\n}\n\nfunction draw() {\n\tif(checkboxAudio.checked()) {\n\t\tupdateAudio();\n\t}\n\n\tif(checkboxTunnel.checked()) {\n\t\ttunnelmode = true\n\t}\n\tpush()\n\n\n\n\trot += sliderRot.value();\n\tgrey = sliderGrey.value();\n\tweight = sliderWeight.value();\n\tmotion = sliderMotion.value();\n\tspeed = sliderSpeed.value();\n\trect1 += sliderrect1.value() * speed;\n\trect2 += sliderrect2.value() * speed;\n\trect3 += sliderrect3.value() * speed;\n\trect4 += sliderrect4.value() * speed;\n\tr = sliderround.value()\n\n\tbackground(bgColor, bgColor2, bgColor3, motion)\n\tnoFill()\n\tstroke(grey)\n\tstrokeWeight(weight)\n\n\tlet ampOffset = .03\n\n\tlet s = abs(sin((ampOffset + rect1) * 0.05) * height)\n\tlet b = abs(sin((ampOffset + rect2) * 0.05) * height)\n\tlet c = abs(sin((ampOffset + rect3) * 0.05) * height)\n\tlet d = abs(sin((ampOffset + rect4) * 0.05) * height)\n\n\tlet m = 0\n\tlet h = 0\n\tlet w = 0\n\tlet l = 1\n\n\tif(checkboxAudio.checked()) {\n\t\tampOffset = amp * 0.03\n\t\ts = ampEase * 4.5\n\t\tb = ampEase * 1\n\t\tc = ampEase * 2\n\t\td = ampEase * 3\n\t\tl = ampEase * .0249\n\t\tm = 30\n\t}\n\n\tif(checkboxTunnel.checked()) {\n\t\ts = (rect1) / 4.5 * 5 % width\n\t\tb = (rect2 + 400) / 1 * 5 % width\n\t\tc = (rect3 + 800) / 2 * 5 % width\n\t\td = (rect4 + 1200) / 3 * 5 % width\n\t}\n\n\tpush()\n\ttranslate(width / 2, height / 2)\n\trotate(radians(rot))\n\trect(0, 0, s * 1.86, s * l + m, r)\n\trect(0, 0, b * 1.86, b * l + m, r)\n\trect(0, 0, c * 1.86, c * l + m, r)\n\trect(0, 0, d * 1.86, d * l + m, r)\n\tpop()\n\tpop()\n\n\tpush()\n\tfor(var x = 0; x < 100; x++) {\n\t\tstroke(255)\n\t\tstrokeWeight(random(1.2, .1))\n\t\t//scale(1.001)\n\t\tpoint(random(width), random(height))\n\t}\n\tpop()\n\n}\n\nfunction changeBG() {\n\tbgColor = random(255);\n\tbgColor2 = random(255);\n\tbgColor3 = random(255); // set value \n}\n\nfunction changeBG2() {\n\tbgColor = 0;\n\tbgColor2 = 0;\n\tbgColor3 = 0; // set value \n}\n\nfunction changerotation() {\n\trot = 0\n\tsliderRot.value(0)\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}\n\nfunction setupGUI() {\n\tguiHolder = createDiv()\n\t\t.class('guiHolder')\n\n\tcreateDiv('Rotation')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderRot = createSlider(0.0, 1.0, 0, .01)\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('slider')\n\n\tcreateDiv('Greyscale')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderGrey = createSlider(0, 255, 255, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('Strokeweight')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderWeight = createSlider(0, 80, 40, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('Motionblur')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderMotion = createSlider(1, 200, 100, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('Rounded Corners')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderround = createSlider(0, 1000, 0, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('General Speed')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderSpeed = createSlider(0, 1, 0.3, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('Speed Rect1')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderrect1 = createSlider(0, 1.2, 0.6, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('Speed Rect2')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderrect2 = createSlider(0, 0.8, 0.4, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('Speed Rect3')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderrect3 = createSlider(0, 4, 2, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tcreateDiv('Speed Rect4')\n\t\t.parent(guiHolder) // min, max, default, stepSize \n\t\t.class('text')\n\n\tsliderrect4 = createSlider(0, 2.4, 1.2, .01)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\n\tmyButton = createButton('random background') // give label \n\t\t.parent(guiHolder)\n\t\t.class('button')\n\tmyButton.mousePressed(changeBG); // run function when pressed \n\n\tmyButton2 = createButton('reset background') // give label \n\t\t.parent(guiHolder)\n\t\t.class('button')\n\tmyButton2.mousePressed(changeBG2); // run function when pressed \n\n\tmyButton3 = createButton('reset rotation')\n\t\t.parent(guiHolder)\n\t\t.class('button') // give label \n\tmyButton3.mousePressed(changerotation); // run function when pressed \n\n\tcheckboxAudio = createCheckbox('Use Audio', false)\n\t\t.parent(guiHolder)\n\t\t.parent(guiHolder)\n\t\t.class('box')\n\tcheckboxAudio.style('color', '#f2f')\n\tcheckboxAudio.style('font-family', 'monaco, monospace')\n\n\tcheckboxTunnel = createCheckbox('Tunnel Mode', false)\n\tcheckboxTunnel.parent(guiHolder)\n\t\t.parent(guiHolder)\n\t\t.class('')\n\n\t//checkboxTunnel.position(width * 0.85, height * 0.9)\n\tcheckboxTunnel.style('color', '#f2f')\n\tcheckboxTunnel.style('font-family', 'monaco, monospace')\n\n\n\t// create <style> tag for custom css (note `backticks` for multi-line value!) \n\tcreateElement('style', ` \n  *{ \n    outline: none; \n    box-sizing: border-box; \n  } \n    .guiHolder{ \n      position: fixed; \n    width: 180px;\n      right: 20px; \n      top: 20px; \n      border: 2px solid #888; \n      border-radius: 20px; \n      padding: 20px; \n    } \n    .text{ \n      color:#fff; \n      font-family:sans-serif; \n      font-size:10pt; \n      padding:5px; \n    } \n    .slider{ \n      color: #f2f;\n      background: #f2f;\n        cursor: pointer;\n\n    } \n        .button{ \n      width: 100%; \n      background-color: #f2f;\n      color:  #fff;\n      margin-top: 15px;\n              cursor: pointer;\n              border-radius: 100px;\n    } \n    \n            .box{ \n      width: 100; \n      color: :#f2f;\n            margin-top: 15px;\n                    cursor-color: pointer;\n    } \n    `)\n}"
    }
  ]
}