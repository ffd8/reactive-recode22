{
  "version": "1.4.1",
  "revision": 44,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "reactive-recode-22-intro_004",
      "mod": 1674086406921,
      "parent": "reactive-recode-22",
      "code": "let credits = {\n\t\"student_names\": \"ted davis\",\n\t\"recode_id\": \"zotero2-2604593.ZU6SYWK7\",\n\t\"recode_timestamp\": 0,\n\t\"recode_title\": \"day_night\",\n\t\"recode_designer\": \" \",\n\t\"recode_year\": 0\n}\n\nlet reactives = []\nlet recodes = [],\n\trmax = 15\n\nlet guiSliders = [],\n\tguiValsOG = [],\n\tguiVals = [],\n\tguiValsInit = true\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tguiSetup()\n\tstrokeJoin(ROUND)\n\tfor(let i = 0; i < 3; i++) {\n\t\treactives.push(new Runner('reactive', 255))\n\t\trecodes.push(new Runner('recode', 0))\n\t}\n\n\tsetupAudio();\n}\n\nfunction draw() {\n\tif(checkboxAudio.checked()) {\n\t\tupdateAudio();\n\t\tlet c = 0\n\t\tfor(let s of guiSliders) {\n\t\t\t//s.attribute('min'), s.attribute('max')\n\t\t\ts.value(guiVals[c] + ampEase / 1000 * s.attribute('max'))\n\t\t\tc++\n\t\t}\n\t}\n\tbackground(0, 255 - sliderTrace.value())\n\tfor(let r of reactives) {\n\t\tr.sw = sliderSW\n\t\tr.display()\n\t}\n\tfor(let r of recodes) {\n\t\tr.sw = sliderSW\n\t\tr.display()\n\t}\n\n\tif(frameCount % 240 == 0) {\n\t\treactives.push(new Runner('reactive', 255))\n\t\trecodes.push(new Runner('recode', 0))\n\t}\n\n\tif(reactives.length > rmax) {\n\t\treactives.splice(0, 1)\n\t\trecodes.splice(0, 1)\n\t}\n}\n\nclass Runner {\n\tconstructor(txt, fc) {\n\t\tthis.txt = txt\n\t\tthis.x = 2000 //random(-textSize(this.txt)*1.5, -width / 2)\n\t\tthis.yOff = floor(random(4))\n\t\tthis.setY()\n\t\tthis.speed = random(3, 15)\n\t\tthis.size = height / 4 * 1.75\n\t\tthis.fill = fc\n\t\tthis.fc = 0\n\t}\n\tupdate() {\n\t\tthis.fc += sliderWaveSpeed.value()\n\t\tthis.x += this.speed * sliderSpeed.value()\n\t\tif(this.x > width * 1.5) {\n\t\t\tthis.setY()\n\t\t\tthis.x = -textSize(this.txt) * 1.5\n\t\t}\n\t}\n\tdisplay() {\n\t\tthis.update()\n\t\tfill(this.fill, sliderAlpha.value())\n\t\ttextAlign(CENTER, CENTER)\n\t\ttextSize(this.size * sliderScale.value())\n\t\tstroke(this.fill, sliderAlpha.value())\n\t\tstrokeWeight(sliderSW.value())\n\t\ttext(this.txt, this.x, this.y + sin(this.fc) * sliderWaveSize.value())\n\t}\n\tsetY() {\n\t\tthis.yOff = floor(random(4))\n\t\tthis.y = map(this.yOff, 0, 3, this.size / 3, height - this.size / 3) //ceil(random(this.yOff)) * height / this.yOff\n\t}\n}\n\nlet presets = [{\n\t\tname: 'ORIGINAL',\n\t\tvals: [50, 255, 1, 1, 1, 0, 0.1]\n\t},\n\t{\n\t\tname: 'BARS',\n\t\tvals: [255, 28.9, 6.51, 1, 0, 0, 0.1]\n\t},\n\t{\n\t\tname: 'TRAILS',\n\t\tvals: [235.2, 161.4, 0.58, 0.32, 0, 81.28, 0.046]\n\t},\n\t{\n\t\tname: 'X-RAY',\n\t\tvals: [255, 35.44, 1.42, 0.55, 9, 1.17, 0.513]\n\t},\n\t{\n\t\tname: 'EXPOSURE',\n\t\tvals: [255, 1.85, 0.1, 2.52, 7.3, 394.5, 0.004]\n\t},\n\t{\n\t\tname: 'SHUFFLE',\n\t\tvals: [255, 255, 0.13, 0.41, 26.1, 11.4, 0.384]\n\t},\n]\n\nfunction guiSetup() {\n\tguiHolder = createElement('div')\n\tguiHolder.class('guiHolder')\n\n\tcreateElement('div', 'PRESET')\n\t\t.parent(guiHolder).class('label')\n\tlet selPresents = createSelect()\n\t\t.parent(guiHolder)\n\t\t.changed(() => {\n\t\t\tsetValues(selPresents.value())\n\t\t})\n\tlet c = 0\n\tfor(let p of presets) {\n\t\tselPresents.option(p.name, c)\n\t\tc++\n\t}\n\n\tcreateElement('div', 'TRACE')\n\t\t.parent(guiHolder).class('label')\n\tsliderTrace = createSlider(0, 255, 50, .1)\n\t\t.parent(guiHolder)\n\tguiSliders.push(sliderTrace)\n\n\tcreateElement('div', 'OPACITY')\n\t\t.parent(guiHolder).class('label')\n\tsliderAlpha = createSlider(0, 255, 255, .01)\n\t\t.parent(guiHolder)\n\tguiSliders.push(sliderAlpha)\n\n\tcreateElement('div', 'SPEED')\n\t\t.parent(guiHolder).class('label')\n\tsliderSpeed = createSlider(0.1, 10, 1, .01)\n\t\t.parent(guiHolder)\n\tguiSliders.push(sliderSpeed)\n\n\tcreateElement('div', 'SCALE')\n\t\t.parent(guiHolder).class('label')\n\tsliderScale = createSlider(.1, 3, 1, .01)\n\t\t.parent(guiHolder)\n\tguiSliders.push(sliderScale)\n\n\tcreateElement('div', 'STROKE WEIGHT')\n\t\t.parent(guiHolder).class('label')\n\tsliderSW = createSlider(0, 100, 1, .1)\n\t\t.parent(guiHolder)\n\tguiSliders.push(sliderSW)\n\n\tcreateElement('div', 'WAVE SIZE')\n\t\t.parent(guiHolder).class('label')\n\tsliderWaveSize = createSlider(0, height / 2, 0, .01)\n\t\t.parent(guiHolder)\n\tguiSliders.push(sliderWaveSize)\n\n\tcreateElement('div', 'WAVE SPEED')\n\t\t.parent(guiHolder).class('label')\n\tsliderWaveSpeed = createSlider(0, 1, .1, .001)\n\t\t.parent(guiHolder)\n\tguiSliders.push(sliderWaveSpeed)\n\n\tmicHolder = createElement('div', '')\n\t\t.parent(guiHolder)\n\tcheckboxAudio = createCheckbox()\n\t\t.parent(micHolder).class('checkbox')\n\t\t.changed(getValues)\n\tcreateElement('div', 'AUDIO-REACTIVE')\n\t\t.parent(micHolder).class('label').style('padding-top', '3px')\n\n\tcreateButton('RANDOM')\n\t\t.parent(guiHolder).style('clear', 'both')\n\t\t.mousePressed(function() {\n\t\t\tfor(let s of guiSliders) {\n\t\t\t\ts.value(random(s.attribute('min'), s.attribute('max') / 4))\n\t\t\t}\n\t\t})\n\n\tcreateButton('RESET')\n\t\t.parent(guiHolder)\n\t\t.mousePressed(function() {\n\t\t\tlet c = 0\n\t\t\tfor(let s of guiSliders) {\n\t\t\t\ts.value(guiValsOG[c])\n\t\t\t\tc++\n\t\t\t}\n\t\t\tcheckboxAudio.checked(false)\n\t\t})\n\n\t// create presets\n\t// createButton('DEBUG')\n\t// \t.parent(guiHolder)\n\t// \t.mousePressed(function() {\n\t// \t\tlet valsCheck = []\n\t// \t\tfor(let s of guiSliders) {\n\t// \t\t\tvalsCheck.push(s.value())\n\t// \t\t}\n\t// \t\tprint(valsCheck)\n\t// \t})\n\n\tif(guiValsInit) {\n\t\tfor(let s of guiSliders) {\n\t\t\tguiValsOG.push(s.value())\n\t\t}\n\t}\n\tguiValsInit = false\n\n\tcreateElement('style', `\n\t\t*{\n\t\t\toutline:none;\n\t\t\tbox-sizing:border-box;\n\t\t}\n\t\t.guiHolder{\n\t\t\tposition:fixed;\n\t\t\tright:10px;\n\t\t\ttop:50px;\n\t\t\twidth:150px;\n\t\t\t// height:200px;\n\t\t\tborder-radius:5px;\n\t\t\tbackground:red;\n\t\t\tcolor:#fff;\n\t\t\tpadding:10px;\n\t\t\tfont-family:sans-serif;\n\t\t\tbackground:rgba(0, 0, 0, .7)\n\t\t}\n\t\t.header{\n\t\t\tfont-size:12pt;\n\t\t\ttext-align:justify;\n\t\t\tmargin: 15px 0 5px 0;\n\n\t\t}\n\t\t.checkbox{\n\t\t\twidth:25px;\n\t\t\tfloat:left\n\t\t}\n\t\t.label{\n\t\t\tmargin-top:5px;\n\t\t\tfont-size:9pt;\n\t\t}\n\t\tbutton{\n\t\t\tmargin:15px 3px 0 !important;\n\t\t\tpadding:1px 3px 1px 3px;\n\t\t\tfloat:left;\n\t\t\tfont-size:9pt;\n\t\t\tmargin:0;\n\t\t}\n\t`)\n}\n\nfunction getValues() {\n\tguiVals = []\n\tfor(let s of guiSliders) {\n\t\tguiVals.push(s.value())\n\t}\n}\n\nfunction setValues(sel) {\n\tlet toggleAudio = false\n\tif(checkboxAudio.checked()) {\n\t\ttoggleAudio = true\n\t\tcheckboxAudio.checked(false)\n\t}\n\tbackground(0)\n\tlet c = 0\n\tfor(let s of guiSliders) {\n\t\ts.value(presets[sel].vals[c])\n\t\tc++\n\t}\n\tif(toggleAudio) {\n\t\tgetValues()\n\t\tcheckboxAudio.checked(true)\n\t}\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}\n\n\n"
    }
  ]
}