{
  "version": "1.4.1",
  "revision": 44,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "Judy and Michelle",
      "mod": 1674092578629,
      "code": "let credits = {\n\t\"student_names\": \"judy kessba, michelle m√ºller\",\n\t\"recode_id\": \"zotero2-2604593.HXFCTX5F\",\n\t\"recode_timestamp\": 27,\n\t\"recode_title\": \"ID_Linienraster\",\n\t\"recode_designer\": \"Arx, Manz\",\n\t\"recode_year\": 0\n}\n\nlet guiHolder\nlet lines, id, density, lines2\nlet slider\nlet sliderDensity, sliderTextSize\nlet rot = 0\nlet colorPicker\nlet colorPicker2\nlet colorPicker3\nlet font\nlet txt = 'ID' \n\n\nfunction preload() {\n\tfont = loadFont(\"data/judy_michelle/Futura.ttf\")\n}\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tlines = createGraphics(width * 2, height * 2)\n\tlines2 = createGraphics(width * 2, height * 2)\n\tid = createGraphics(width * 2, height * 2)\n\timageMode(CENTER)\n\n\n\n\t// create generic div (html container) \n\tguiHolder = createDiv()\n\t\t.class('guiHolder') // add class for styling via CSS \n\n    \n\tlet myInput = createInput(txt)\n\t.class ('input')\n\t\t.parent(guiHolder) \n\tmyInput.attribute('placeholder', 'type some text here')\n\n\tmyInput.input(function() {  \n\t\ttxt = this.value(); // update txt value \n\t\t\n\n\t});\n\t\n\n\n\n\tcreateDiv('LINE SPACING')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\n\n\tsliderDensity = createSlider(5, 1000, 150)\n\t\t.parent(guiHolder) //  place inside gui div \n\t\t.class('slider') // class for CSS \n\t\t.input(function() {\n\t\t\tbackground(0, 0, this.value()) // use immediately, basic demo \n\t\t})\n\n\n\tcreateDiv('TEXT SIZE')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\n\tsliderTextSize = createSlider(10, 5000, 600)\n\t\t.parent(guiHolder) \n\t\t.class('slider')\n\t\t.input(function() {\n\t\t\tbackground(0, 0, this.value()) // use immediately, basic demo \n\t\t})\n\n\n\t// use styled div as label \n\tcreateDiv('SPIN')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\n\n\tslider = createSlider(-25, 25, .01, .01)\n\t\t.parent(guiHolder) //  place inside gui div \n\t\t.class('slider') // class for CSS \n\t\t.input(function() {\n\t\t\tbackground(0, 0, this.value()) // use immediately, basic demo \n\t\t})\n\t\t\n\t createButton('FREZZE!')\n\t.parent(guiHolder).class('button')\n    .mousePressed(function() {\n\t\t\tguiReset()\n\t\t})\n\n\n\tcreateDiv('COLOR')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\tcolorPicker = createColorPicker(1)\n\t\t.parent(guiHolder)\n\t\t.class ('colorpicker')\n\t//\tcolorPicker.position(397, 80);\n\n\tcolorPicker2 = createColorPicker(1)\n\t\t.parent(guiHolder)\n\t\t.class ('colorpicker')\n\n\tcolorPicker3 = createColorPicker(255)\n\t\t.parent(guiHolder)\n\t\t.class ('colorpicker')\n\n\n\n\n\n\t// create <style> tag for custom css (note `backticks` for multi-line value!) \n\tcreateElement('style', ` \n      *{ \n        outline: none; \n        box-sizing: border-box; \n      } \n        .guiHolder{ \n          position: fixed; \n          right: 50px; \n          top: 50px; \n          //border: 2px solid #fff; \n          background: rgba(210,210,210, 0.5);\n          border-radius: 10px; \n          padding: 10px; \n        } \n        .label{ \n          color:#000; \n          background:#fff;\n          font-family:sans-serif; \n          font-size:10pt; \n          //text-decoration:underline; \n          padding:5px; \n        } \n        .slider{ \n          -webkit-appearance: none;\n          width: 100%; \n          background: #000;\n          opacity:90%;\n          height: 6px;\n          border-radius: 10px;\n          \n        } \n       \n        .input{\n        width: 100%;\n        padding: 12px 20px;\n        margin: 8px 0;\n        box-sizing: border-box;\n        }\n        \n        .colorpicker{\n\t\t\t-webkit-appearance: none;\n\t\t\t appearance: none;\n\t\t\t border: none;\n\t\t\t width: 78px;\n\t\t\t height: 50px;\n\t\t\t \n\t\t\t \n        }\n        .button {\n         background-color: #000;\n         padding:5px; \n         color: white;\n         padding: 10px 10px;\n         text-align: center;\n         font-size: 12px;\n         margin: 4px 2px;\n         width: 100%; \n        }\n       \n        `)\n\n\tangleMode(DEGREES)\n}\n\nfunction guiReset() {\n\tslider.value(0,01,20,.09)\n\n}\n\nfunction draw() {\n\tbackground(colorPicker3.color())\n\t//lines background\n\tlines.strokeWeight(2)\n\tlines.stroke(colorPicker.color())\n\t//for(let i=0; i<width; i++){\n\t//\tlines.line(i*density,0,i*density,height)\n\tlines.clear()\n\tfor(let i = 0; i < sliderDensity.value(); i++) {\n\t\tlet x = map(i, 0, sliderDensity.value(), 0, lines.width)\n\t\tlines.line(x, 0, x, lines.height);\n\t}\n\n\n\t//lines type\n\tlines2.strokeWeight(2)\n\tlines2.stroke(colorPicker2.color())\n\t//for(let i=0; i<width; i++){\n\t//\tlines.line(i*density,0,i*density,height)\n\tlines2.clear()\n\tfor(let i = 0; i < sliderDensity.value(); i++) {\n\t\tlet x = map(i, 0, sliderDensity.value(), 0, lines2.width)\n\t\tlines2.line(x, 0, x, lines2.height);\n\t}\n\n\n\n\tid.clear()\n\tid.image(lines2, 0, 0)\n\tid.erase()\n\tlet myWord = 'ID'\n\tid.textSize(sliderTextSize.value()) \n\tid.textAlign(CENTER, CENTER)\n\tid.textFont(font)\n\tid.text(txt, id.width / 2, id.height / 2)\n\tid.noErase()\n\n\ttranslate(width / 2, height / 2)\n\tpush()\n\trot += slider.value()\n\trotate(rot)\n\timage(lines, 0, 0)\n\tpop()\n\timage(id, 0, 0)\n}"
    }
  ]
}