{
  "version": "1.4.1",
  "revision": 44,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "Anja Rothenbuehler - Valentina Bignasca_001",
      "mod": 1673015224286,
      "code": "let credits = { \n    \"student_names\": \"Valentina Bignasca, Anja Rothenb√ºhler\", \n    \"recode_id\": \"zotero2-2604593.Y5X356W9\", \n    \"recode_timestamp\": 55, \n    \"recode_title\": \"Klassenportrait Katharina Erich\", \n    \"recode_designer\": \"Katharina Erich\", \n    \"recode_year\": 1995 \n} \n\n\nlet sliderWiggle, sliderOpacity;\nlet img;\nlet guiHolder;\nlet sel;\nlet img1\nlet img2\nlet val2\nlet imgs = [],\n\timgsSel = 0\nlet checkbox;\nlet shake = false // use a toggle switch to alternate\n\nfunction preload() {\n\timgs.push(loadImage('data/anja_valentina/12.jpg'))\n\timgs.push(loadImage('data/anja_valentina/13.jpg'))\n\timgs.push(loadImage('data/anja_valentina/14.jpg'))\n\timgs.push(loadImage('data/anja_valentina/15.jpg'))\n\timgs.push(loadImage('data/anja_valentina/16.jpg'))\n\timgs.push(loadImage('data/anja_valentina/17.jpg'))\n\timgs.push(loadImage('data/anja_valentina/18.jpg'))\n\timgs.push(loadImage('data/anja_valentina/19.jpg'))\n\timgs.push(loadImage('data/anja_valentina/20.jpg'))\n\timgs.push(loadImage('data/anja_valentina/21.jpg'))\n\timgs.push(loadImage('data/anja_valentina/22.jpg'))\n}\n\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t\n\t\n\tsetupAudio();\n\n\n\t// create generic div (html container) \n\tguiHolder = createDiv()\n\t\t.class('guiHolder') // add class for styling via CSS \n\t\t\n\t\t\t//drop down menu\n\ttextAlign(CENTER);\n\tbackground(200);\n\tsel = createSelect();\n\tsel.parent(guiHolder)\n\t//sel.position(width / 2, 40);\n\tsel.option('Face 1', 0);\n\tsel.option('Face 2', 1);\n\tsel.option('Face 3', 2);\n\tsel.option('Face 4', 3);\n\tsel.option('Face 5', 4);\n\tsel.option('Face 6', 5);\n\tsel.option('Face 7', 6);\n\tsel.option('Face 8', 7);\n\tsel.option('Face 9', 8);\n\tsel.option('Face 10', 9);\n\tsel.option('Face 11', 10);\n\tsel.selected(0);\n\tsel.changed(mySelectEvent);\n\n\t// use styled div as label \n\tcreateDiv('Wiggle')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\n\n\tsliderWiggle = createSlider(0, 200, 10, .1)\n\t\t.parent(guiHolder) //  place inside gui div \n\t\t.class('slider') // class for CSS \n\t\t\n\t\tcreateDiv('Wiggle-speed')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\n\tsliderSpeed = createSlider(1, 10, 8)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\t\t\n\t\t createDiv('Brightness')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\t\t\n\tsliderBrightness = createSlider(1, 250, 100)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\t\t\n\t     createDiv('Brightness-speed')\n\t\t.parent(guiHolder) // place inside gui div \n\t\t.class('label') // class for CSS \n\t\t\n\tsliderBrightnessSpeed = createSlider(.001, 7000, .001, 10)\n\t\t.parent(guiHolder)\n\t\t.class('slider')\n\t\t\n\t\t\n\n\n\t// create <style> tag for custom css (note `backticks` for multi-line value!) \n\tcreateElement('style', ` \n  *{ \n    outline: none; \n    box-sizing: border-box; \n  } \n    .guiHolder{ \n      position: fixed; \n      right: 50px; \n      top: 40px; \n      //border: 2px solid #fff; \n      border-radius: 10px; \n      padding: 10px; \n    } \n    .label{ \n      color:#fff; \n      font-family:helvetica, monospace; \n      font-size:10pt; \n      margin-bottom:5px; \n      margin-top:15px\n    } \n    .sliderWiggle{ \n      width: 100%; \n    } \n    `)\n\n\n\n\t\n    checkbox = createCheckbox('Say something', false);\n\tcheckbox.style('color', '#fff')\n\tcheckbox.style('margin-top:15px')\n\tcheckbox.style('margin-bottom:15px')\n\tcheckbox.changed(myCheckedEvent);\n\tcheckbox.style('font-family', 'helvetica', 'monospace')\n\tcheckbox.style('font-size:10pt')\n\tcheckbox.parent(guiHolder);\n\n\tcreateButton('Reset')\n\t\t.parent(guiHolder)\n\t\t.mousePressed(function() {\n\t\t\tguiReset()\n\t\t})\n\n}\n\n\nfunction mySelectEvent() {\n\timgsSel = sel.value();\n\tbackground(200);\n\n}\n\nfunction draw() {\n\tbackground('black');\n\n\tlet val = sliderWiggle.value()\n\t\t/* audio vars: amp, ampEase, fft, waveform */\n\tif(checkbox.checked()) {\n\t\tupdateAudio();\n\n\tval = amp\n\t}\n\tlet x = 0 //width/2\n\timageMode(CENTER)\n\n\t// alternate on x frameCounts\n\tif(frameCount % (11-sliderSpeed.value())== 0) {\n\t\tshake = !shake\n\t}\n\n\tlet currSel = imgsSel\n\n\tif(shake) {\n\t\tx -= val\n\t} else {\n\t\tx += val\n\t\t//currSel++\n\t}\n\ttranslate(x, 0)\n\t//ellipse(width / 2, height / 2, 200, 300)\n\tlet scl = height/imgs[currSel].height\n\timage(imgs[currSel], width / 2, height / 2, imgs[currSel].width*scl,imgs[currSel].height*scl);\n\n\n\t//\tclear();\n\tsquareColor = color(0);\n\tsquareColor.setAlpha(1 + sliderBrightness.value() * sin(millis() / (7000-sliderBrightnessSpeed.value())));\n\tfill(squareColor);\n\trect(0, 0, width, height);\n\t//describe('a square with gradually changing opacity on a gray background');\n\n}\n\nfunction guiReset() {\n\tts = height * 4\n\tsliderWiggle.value(10)\n\tsliderSpeed.value(8)\n\tsliderBrightness.value(100)\n\tsliderBrightnessSpeed.value(.001)\n\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude \n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude \n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude \n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp' \n\twaveform = fftRaw.waveform(); // array (-1, 1) \n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255) \n}\n\nfunction myCheckedEvent() {\n\tif(checkbox.checked()) {\n\t\tconsole.log('Checking!');\n\t} else {\n\t\tconsole.log('Unchecking!');\n\t}\n\n}"
    }
  ]
}